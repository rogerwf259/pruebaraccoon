{"version":3,"sources":["components/Item.js","components/List.js","components/Loader.js","serviceWorker.js","index.js","App.js"],"names":["Item","_ref","image","description","mood","_useState","useState","_useState2","Object","slicedToArray","show","setShow","react_default","a","createElement","className","Button","onClick","src","alt","Modal","size","open","onClose","Header","Content","Image","wrapped","Description","includes","style","fontSize","Actions","content","List","items","marginTop","map","_ref2","id","imgUrl","desc","key","Loader","Boolean","window","location","hostname","match","ReactDOM","render","data","setData","_useState3","_useState4","loading","setLoading","fetchFeelings","asyncToGenerator","regenerator_default","mark","_callee","response","feelings","wrap","_context","prev","next","fetch","method","sent","json","console","log","stop","apply","this","arguments","useEffect","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a79e7046.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal, Button, Image, Header } from 'semantic-ui-react';\r\n\r\nexport default function Item({ image, description, mood }) {\r\n  const [show, setShow] = useState(false);\r\n  const evilArray = [1, 3, 4, 8];\r\n  return (\r\n    <div className=\"item\">\r\n      <div className=\"right floated content\">\r\n        <Button className=\"inverted violet\" onClick={() => setShow(true)}>\r\n          As√≠\r\n        </Button>\r\n      </div>\r\n      <img className=\"ui avatar image\" src={image} alt=\"Avatar\" />\r\n      <div className=\"content\">{description}</div>\r\n      <Modal size=\"tiny\" open={show} onClose={() => setShow(false)}>\r\n        <Modal.Header>{description}</Modal.Header>\r\n        <Modal.Content image>\r\n          <Image wrapped size=\"large\" src={image} />\r\n          <Modal.Description>\r\n            <Header>De verdad te sientes asi sobre Raccoon?</Header>\r\n            {evilArray.includes(mood) ? (\r\n              <span style={{ fontSize: '100px' }}>&#128547;</span>\r\n            ) : (\r\n              <span style={{ fontSize: '100px' }}>&#129299;</span>\r\n            )}\r\n          </Modal.Description>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button className=\"inverted red\" onClick={() => setShow(false)}>\r\n            Cerrar\r\n          </Button>\r\n          <Button className=\"inverted purple\" content=\"Justo asi?\" />\r\n        </Modal.Actions>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Item from './Item';\r\n\r\n/*<div className=\"eight wide column\" style={{ marginTop: '25vh' }}>\r\n      <div className=\"ui middle aligned divided animated list\">\r\n        {items.map(({ id, imgUrl, desc }) => {\r\n          return <Item key={id} image={imgUrl} description={desc} mood={id} />;\r\n        })}\r\n      </div>\r\n    </div>*/\r\n\r\nexport default function List({ items }) {\r\n  return (\r\n    <div className=\"sixteen wide column\" style={{ marginTop: '10vh' }}>\r\n      <div className=\"ui centered card\">\r\n        <div className=\"content\">\r\n          <div className=\"header\">\r\n            Cuentanos como te sientes acerca de Raccoon Dev Studio.\r\n          </div>\r\n        </div>\r\n        <div className=\"content\">\r\n          <div className=\"ui middle aligned divided animated list\">\r\n            {items.map(({ id, imgUrl, desc }) => {\r\n              return (\r\n                <Item key={id} image={imgUrl} description={desc} mood={id} />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"content\">\r\n          <h4 className=\"ui sub header\">Gracias por tu opinion!</h4>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <div className=\"six wide column\" style={{ marginTop: '45vh' }}>\r\n      <div className=\"ui icon message\">\r\n        <i className=\"notched circle loading icon\" />\r\n        <div className=\"content\">\r\n          <div className=\"header\">Solo un segundo mas</div>\r\n          <p>Estamos dando los toques finales!</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\nimport List from './components/List';\nimport Loader from './components/Loader';\n\nexport default function App() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const fetchFeelings = async () => {\n    const response = await fetch(\n      'http://159.89.143.117:3001/raccoon/feelings',\n      {\n        method: 'GET'\n      }\n    );\n    const { feelings } = await response.json();\n    setData(feelings);\n    setLoading(false);\n    console.log('Feelings', data);\n  };\n  useEffect(() => {\n    fetchFeelings();\n  }, []);\n\n  return (\n    <div className=\"ui container\">\n      <div className=\"ui equal width stretched grid\">\n        <div className=\"sixteen wide column\">\n          <div className=\"ui equal width grid\">\n            <div className=\"row centered\">\n              {loading ? <Loader /> : <List items={data} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}